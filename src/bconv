#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
"""
usage: bconv [OPTIONS] [INTEGER [INTEGER …]]

positional arguments:
  INTEGER               integer to convert

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show version information and exit
  -c, --copyright       show copying policy and exit
  -i INPUT_BASE, --input-base INPUT_BASE
                        input is in INPUT_BASE (2‥36)
  -o OUTPUT_BASE, --output-base OUTPUT_BASE
                        output is in OUTPUT_BASE (2‥36)
  -w WIDTH, --width WIDTH
                        pad on the left with zeroes until WIDTH
  -b, --bits            show number of bits in INTEGER
  -l, --lower           show result in lowercase (default)
  -u, --upper           show result in uppercase

Default bases are 10 (decimal).

For convenience, input and output bases can be specified either as an
integer or as BINary (2), OCTal (8), DECimal (10) or HEXadecimal (16).

The characters A‥Z corresponds to bases 11‥36.

Modelled after a similar program written in C by yours truly in 1996.
"""
##############################################################################
# This program is free software; you can redistribute it and/or modify it    #
# under the terms of the GNU General Public License as published by the Free #
# Software Foundation; either version 3 of the License, or (at your option)  #
# any later version.                                                         #
#                                                                            #
# This program is distributed in the hope that it will be useful, but with-  #
# out any warranty; without even the implied warranty of merchantability or  #
# fitness for a particular purpose. See the GNU General Public License for   #
# more details.  <http://gplv3.fsf.org/>                                     #
##############################################################################

import sys
import os
import pathlib
import argparse
import string

from collections import deque
from pprint import pprint

try:
    from locale import (Error, setlocale, LC_ALL)
    _ = setlocale(LC_ALL, '')
except (ImportError, ModuleNotFoundError, NameError, Error):
    pass

if sys.version_info < (3, 4):
    print('this program requires python3.4+.', file=sys.stderr)
    sys.exit(1)

__author__ = 'Klaus Alexander Seistrup <klaus@seistrup.dk>'
__whoami__ = 'bconv'
__revision__ = '2018-08-11'
__version__ = '0.5.1.1 ({})'.format(__revision__)
__copyright__ = """\
bconv {}
Copyright © 1996-2018 Klaus Alexander Seistrup <klaus@seistrup.dk>

This is free software; see the source for copying conditions. There is no
warranty; not even for merchantability or fitness for a particular purpose.\
""".format(__version__)

DEBUG = os.environ.get('DEBUG', 'False')[0].upper() in '1JTY'  # 1/Ja/True/Yes
EPILOG = """
Default bases are 10 (decimal).

For convenience, input and output bases can be specified either as an
integer or as BINary (2), OCTal (8), DECimal (10) or HEXadecimal (16).

The characters A‥Z corresponds to bases 11‥36.
"""

(STDIN, STDOUT, STDERR) = (sys.stdin, sys.stdout, sys.stderr)

ALPHABET = string.digits + string.ascii_lowercase

# {'A': 11, 'B': 12, …, 'Z': 36}
BASES = {v: k for (k, v) in enumerate(string.ascii_uppercase, start=11)}
SUGAR = (
    (2, 'BINARY'),
    (3, 'TERNARY'),
    (4, 'QUARTERNARY'),
    (5, 'QUINARY'),
    (6, 'SEXTAL'),
    (7, 'SEPTIMAL'),
    (8, 'OCTAL'),
    (9, 'NONARY'),
    (10, 'DECIMAL'),
    (12, 'DUODECIMAL'),
    (16, 'HEXADECIMAL'),
    (20, 'VIGESIMAL'),
    (30, 'TRIGESIMAL')
)

# Add convenient synonyms
for (_base, _name) in SUGAR:
    BASES[_name] = BASES[_name[:3]] = _base
del _base, _name


def debug(head, data=None):
    """Possibly pretty print an object to stderr"""
    if DEBUG:
        pprint(head if data is None else {head: data}, stream=STDERR)


def deuglify(error):
    """Deuglify the EnvironmentError class of errors"""
    debug('ugly', error)

    if not isinstance(error, Exception):
        return error

    nargs = len(error.args)

    if nargs == 1:
        return str(error)

    strerr = getattr(error, 'strerror', None)

    if nargs == 2 and strerr is not None:
        fname1 = getattr(error, 'filename', None)
        fname2 = getattr(error, 'filename2', None)

        if fname1 and fname2:
            return '{}: {} → {}'.format(strerr, fname1, fname2)
        if fname1 or fname2:
            return '{}: {}'.format(strerr, fname1 or fname2)

        return strerr

    # Let's not pretend that we know the nature of the exception
    return error


def die(error=None):
    """Exit gracefully"""
    debug('exit', error)

    if error:
        print(deuglify(error), file=STDERR)

    sys.exit(1 if error else 0)


def bitcount(posint):
    """Count the number of bits in a positive integer"""
    bits = 0

    while posint:
        posint &= (posint - 1)
        bits += 1

    return bits


def bconv(integer, base, toupper=False, count_bits=False):
    """Convert an integer to its string representation in base BASE"""
    if not integer:
        return '0'

    if integer < 0:
        sign = '-'
        integer = -integer
    else:
        sign = ''

    if count_bits:
        integer = bitcount(integer)

    def _bconv(posint, base=base):
        """Internal conversion routine for bases not in (2, 8, 10, 16)"""
        (alphabet, digits) = (ALPHABET, deque())
        while posint:
            (posint, modulus) = divmod(posint, base)
            digits.appendleft(alphabet[modulus])
        return ''.join(digits)

    # For bases 2, 8, 10 and 16 use Python's builtin methods
    method = {
        2: lambda i: bin(i)[2:],
        8: lambda i: oct(i)[2:],
        10: str,
        16: lambda i: hex(i)[2:],
    }.get(base, _bconv)

    result = method(integer)

    return sign + (result.upper() if toupper else result)


def strtol(strint, base):
    """Convert string to long"""
    try:
        result = int(strint, base)
    except ValueError as error:
        import re
        die(re.sub(r'int\(\)', 'integer', str(error)))

    return result


def strtobase(arg):
    """Convert user input to BASE"""
    try:
        base = BASES.get(arg.upper(), None) or int(arg)
    except ValueError:
        # Main routine will complain for us
        base = -1

    return base


def main(progname=__whoami__):
    """Main entry point"""
    debug('argv', sys.argv)

    parser = argparse.ArgumentParser(
        prog=progname,
        formatter_class=argparse.RawTextHelpFormatter,
        epilog=EPILOG
    )
    # Generic arguments
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s/{}'.format(__version__),
                        help='show version information and exit')
    parser.add_argument('-c', '--copyright', action='version',
                        version=__copyright__,
                        help='show copying policy and exit')
    # Specific arguments
    parser.add_argument('-i', '--input-base', default='10',
                        help='input is in INPUT_BASE (2‥36)')
    parser.add_argument('-o', '--output-base', default='10',
                        help='output is in OUTPUT_BASE (2‥36)')
    parser.add_argument('-w', '--width', type=int, default=0,
                        help='pad on the left with zeroes until WIDTH')
    parser.add_argument('-b', '--bits', action='store_true',
                        help='show number of bits in INTEGER')

    group = parser.add_mutually_exclusive_group()
    group.add_argument('-l', '--lower', action='store_true',
                       help='show result in lowercase (default)')
    group.add_argument('-u', '--upper', action='store_true',
                       help='show result in uppercase')

    parser.add_argument('INTEGER', nargs='*',
                        help='integer to convert')

    args = parser.parse_args()
    debug('args', args)

    (ibase, obase) = (strtobase(args.input_base), strtobase(args.output_base))
    width = args.width

    try:
        assert 1 < ibase < 37, 'input base not in range 2‥36'
        assert 1 < obase < 37, 'output base not in range 2‥36'
        assert width >= 0, 'width must be a positive integer'
    except AssertionError as error:
        die(error)

    if args.INTEGER:
        integers = args.INTEGER
    else:
        try:
            integers = STDIN.read().split()
        except (IOError, OSError) as error:
            die(error)
        except KeyboardInterrupt:
            die()

    for strint in integers:
        integer = strtol(strint, ibase)
        if args.bits and integer < 0:
            die('bit count valid for positive integers only')
        converted = bconv(integer, obase, args.upper, args.bits)
        print(converted.zfill(width) if width else converted)

    return 0


if __name__ == '__main__':
    sys.exit(main(pathlib.Path(sys.argv[0]).name))

# eof
